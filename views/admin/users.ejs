<%- contentFor('body') %>

<div class="row">
    <div class="col-12">
        <div class="card shadow">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0"><i class="fas fa-users"></i> Quản lý người dùng</h4>
                <button type="button" class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#createUserModal">
                    <i class="fas fa-plus"></i> Thêm người dùng
                </button>
            </div>
            <div class="card-body">
                <!-- Search and Filter Section -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="input-group">
                            <input type="text" class="form-control" id="searchInput" placeholder="Tìm kiếm theo tên, email...">
                            <button class="btn btn-outline-primary" type="button" id="searchBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="roleFilter">
                            <option value="">Tất cả vai trò</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="typeFilter">
                            <option value="">Tất cả loại</option>
                            <option value="admin">Admin</option>
                            <option value="librarian">Thủ thư</option>
                            <option value="student">Sinh viên</option>
                            <option value="staff">Nhân viên</option>
                            <option value="teacher">Giáo viên</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-secondary w-100" id="resetFilters">
                            <i class="fas fa-undo"></i> Đặt lại
                        </button>
                    </div>
                </div>

                <!-- Users Table -->
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Tên đăng nhập</th>
                                <th>Email</th>
                                <th>Vai trò</th>
                                <th>Loại</th>
                                <th>Trạng thái</th>
                                <th>Đăng nhập cuối</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- Data will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Loading State -->
                <div id="loadingState" class="text-center py-4 d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                </div>

                <!-- No Data State -->
                <div id="noDataState" class="text-center py-4 d-none">
                    <i class="fas fa-users fa-3x text-muted mb-3"></i>
                    <p class="text-muted">Không tìm thấy người dùng nào</p>
                </div>

                <!-- Pagination -->
                <nav aria-label="Phân trang người dùng" id="paginationContainer" class="d-none">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <small class="text-muted" id="paginationInfo"></small>
                        </div>
                        <ul class="pagination mb-0" id="pagination">
                            <!-- Pagination will be generated here -->
                        </ul>
                    </div>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">
                    <i class="fas fa-user-plus"></i> Thêm người dùng mới
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createUserForm" novalidate>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createUsername" class="form-label">Tên đăng nhập <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="createUsername" name="username" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createEmail" class="form-label">Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="createEmail" name="email" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createPassword" class="form-label">Mật khẩu <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="createPassword" name="password" required>
                                    <button class="btn btn-outline-secondary" type="button" id="toggleCreatePassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createPhone" class="form-label">Số điện thoại</label>
                                <input type="tel" class="form-control" id="createPhone" name="phone">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createRole" class="form-label">Vai trò</label>
                                <select class="form-select" id="createRole" name="role_id">
                                    <option value="">Chọn vai trò</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="createUserType" class="form-label">Loại người dùng</label>
                                <select class="form-select" id="createUserType" name="user_type">
                                    <option value="">Chọn loại</option>
                                    <option value="admin">Admin</option>
                                    <option value="librarian">Thủ thư</option>
                                    <option value="student">Sinh viên</option>
                                    <option value="staff">Nhân viên</option>
                                    <option value="teacher">Giáo viên</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="createAddress" class="form-label">Địa chỉ</label>
                        <textarea class="form-control" id="createAddress" name="address" rows="3"></textarea>
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="createUserBtn">
                    <i class="fas fa-save"></i> Tạo người dùng
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">
                    <i class="fas fa-user-edit"></i> Chỉnh sửa người dùng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm" novalidate>
                    <input type="hidden" id="editUserId" name="id">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editUsername" class="form-label">Tên đăng nhập <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editUsername" name="username" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="editEmail" name="email" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editPhone" class="form-label">Số điện thoại</label>
                                <input type="tel" class="form-control" id="editPhone" name="phone">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editActive" class="form-label">Trạng thái</label>
                                <select class="form-select" id="editActive" name="is_active">
                                    <option value="true">Hoạt động</option>
                                    <option value="false">Vô hiệu hóa</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editRole" class="form-label">Vai trò</label>
                                <select class="form-select" id="editRole" name="role_id">
                                    <option value="">Chọn vai trò</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editUserType" class="form-label">Loại người dùng</label>
                                <select class="form-select" id="editUserType" name="user_type">
                                    <option value="">Chọn loại</option>
                                    <option value="admin">Admin</option>
                                    <option value="librarian">Thủ thư</option>
                                    <option value="student">Sinh viên</option>
                                    <option value="staff">Nhân viên</option>
                                    <option value="teacher">Giáo viên</option>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="editAddress" class="form-label">Địa chỉ</label>
                        <textarea class="form-control" id="editAddress" name="address" rows="3"></textarea>
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="editUserBtn">
                    <i class="fas fa-save"></i> Cập nhật
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Reset Password Modal -->
<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">
                    <i class="fas fa-key"></i> Đặt lại mật khẩu
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="resetPasswordForm" novalidate>
                    <input type="hidden" id="resetUserId">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i> Bạn sắp đặt lại mật khẩu cho người dùng: <strong id="resetUsername"></strong>
                    </div>
                    
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">Mật khẩu mới <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                            <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <div class="form-text">Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường, số và ký tự đặc biệt</div>
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-warning" id="resetPasswordBtn">
                    <i class="fas fa-key"></i> Đặt lại mật khẩu
                </button>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    let currentPage = 1;
    let currentLimit = 20;
    let currentFilters = {};
    let roles = [];

    // Initialize page
    init();

    async function init() {
        try {
            await loadRoles();
            await loadUsers();
            setupEventListeners();
        } catch (error) {
            console.error('Lỗi khởi tạo trang:', error);
            showAlert('danger', 'Có lỗi xảy ra khi tải dữ liệu');
        }
    }

    // Load roles for dropdown
    async function loadRoles() {
        try {
            const response = await fetch('/api/admin/roles', {
                method: 'GET',
                headers: {
                    'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });

            if (response.ok) {
                const data = await response.json();
                roles = data.data;
                
                // Populate role dropdowns
                const roleOptions = roles.map(role => 
                    `<option value="${role.id}">${role.display_name}</option>`
                ).join('');
                
                $('#roleFilter, #createRole, #editRole').append(roleOptions);
            }
        } catch (error) {
            console.error('Lỗi tải vai trò:', error);
        }
    }

    // Load users with pagination and filters
    async function loadUsers(page = 1) {
        showLoading();
        
        try {
            const params = new URLSearchParams({
                page: page,
                limit: currentLimit,
                ...currentFilters
            });

            const response = await fetch(`/api/admin/users?${params}`, {
                method: 'GET',
                headers: {
                    'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });

            if (response.ok) {
                const data = await response.json();
                renderUsers(data.data.users);
                renderPagination(data.data.pagination);
                currentPage = page;
            } else {
                throw new Error('Không thể tải danh sách người dùng');
            }
        } catch (error) {
            console.error('Lỗi tải người dùng:', error);
            showNoData();
            showAlert('danger', 'Có lỗi xảy ra khi tải danh sách người dùng');
        } finally {
            hideLoading();
        }
    }

    // Render users table
    function renderUsers(users) {
        const tbody = $('#usersTableBody');
        tbody.empty();

        if (users.length === 0) {
            showNoData();
            return;
        }

        hideNoData();

        users.forEach(user => {
            const statusBadge = user.is_active 
                ? '<span class="badge bg-success">Hoạt động</span>'
                : '<span class="badge bg-danger">Vô hiệu hóa</span>';

            const lastLogin = user.last_login 
                ? new Date(user.last_login).toLocaleString('vi-VN')
                : 'Chưa đăng nhập';

            const roleName = user.role_display_name || 'Chưa phân vai trò';
            const userType = user.user_type || 'Không xác định';

            const row = `
                <tr>
                    <td>${user.id}</td>
                    <td>
                        <strong>${user.username}</strong>
                        ${user.is_locked ? '<i class="fas fa-lock text-warning ms-1" title="Tài khoản bị khóa"></i>' : ''}
                    </td>
                    <td>${user.email}</td>
                    <td>${roleName}</td>
                    <td>
                        <span class="badge bg-info">${userType}</span>
                    </td>
                    <td>${statusBadge}</td>
                    <td>${lastLogin}</td>
                    <td>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-primary" onclick="editUser(${user.id})" title="Chỉnh sửa">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-outline-warning" onclick="resetPassword(${user.id}, '${user.username}')" title="Đặt lại mật khẩu">
                                <i class="fas fa-key"></i>
                            </button>
                            ${user.is_locked ? 
                                `<button type="button" class="btn btn-outline-success" onclick="unlockUser(${user.id})" title="Mở khóa">
                                    <i class="fas fa-unlock"></i>
                                </button>` : ''
                            }
                            ${user.id !== <%= user.id %> ? 
                                `<button type="button" class="btn btn-outline-danger" onclick="deleteUser(${user.id}, '${user.username}')" title="Xóa">
                                    <i class="fas fa-trash"></i>
                                </button>` : ''
                            }
                        </div>
                    </td>
                </tr>
            `;
            tbody.append(row);
        });
    }

    // Render pagination
    function renderPagination(pagination) {
        const container = $('#paginationContainer');
        const paginationEl = $('#pagination');
        const infoEl = $('#paginationInfo');

        if (pagination.totalPages <= 1) {
            container.addClass('d-none');
            return;
        }

        container.removeClass('d-none');

        // Update info
        const start = (pagination.currentPage - 1) * pagination.itemsPerPage + 1;
        const end = Math.min(start + pagination.itemsPerPage - 1, pagination.totalItems);
        infoEl.text(`Hiển thị ${start}-${end} trong ${pagination.totalItems} người dùng`);

        // Generate pagination
        paginationEl.empty();

        // Previous button
        if (pagination.currentPage > 1) {
            paginationEl.append(`
                <li class="page-item">
                    <a class="page-link" href="#" onclick="loadUsers(${pagination.currentPage - 1})">Trước</a>
                </li>
            `);
        }

        // Page numbers
        const startPage = Math.max(1, pagination.currentPage - 2);
        const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

        for (let i = startPage; i <= endPage; i++) {
            const activeClass = i === pagination.currentPage ? 'active' : '';
            paginationEl.append(`
                <li class="page-item ${activeClass}">
                    <a class="page-link" href="#" onclick="loadUsers(${i})">${i}</a>
                </li>
            `);
        }

        // Next button
        if (pagination.currentPage < pagination.totalPages) {
            paginationEl.append(`
                <li class="page-item">
                    <a class="page-link" href="#" onclick="loadUsers(${pagination.currentPage + 1})">Sau</a>
                </li>
            `);
        }
    }

    // Setup event listeners
    function setupEventListeners() {
        // Search
        $('#searchBtn').click(function() {
            const search = $('#searchInput').val().trim();
            currentFilters.search = search;
            loadUsers(1);
        });

        $('#searchInput').keypress(function(e) {
            if (e.which === 13) {
                $('#searchBtn').click();
            }
        });

        // Filters
        $('#roleFilter, #typeFilter').change(function() {
            const roleId = $('#roleFilter').val();
            const userType = $('#typeFilter').val();
            
            currentFilters.role_id = roleId;
            currentFilters.user_type = userType;
            
            loadUsers(1);
        });

        // Reset filters
        $('#resetFilters').click(function() {
            $('#searchInput').val('');
            $('#roleFilter').val('');
            $('#typeFilter').val('');
            currentFilters = {};
            loadUsers(1);
        });

        // Create user form
        setupCreateUserForm();
        setupEditUserForm();
        setupResetPasswordForm();

        // Password toggles
        setupPasswordToggles();
    }

    // Setup create user form
    function setupCreateUserForm() {
        $('#createUserBtn').click(async function() {
            const form = $('#createUserForm')[0];
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            const button = $(this);
            const originalText = button.html();
            button.html('<span class="spinner-border spinner-border-sm me-2"></span>Đang tạo...').prop('disabled', true);

            try {
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());

                const response = await fetch('/api/admin/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (response.ok) {
                    showAlert('success', result.message);
                    $('#createUserModal').modal('hide');
                    form.reset();
                    form.classList.remove('was-validated');
                    await loadUsers(currentPage);
                } else {
                    showAlert('danger', result.message);
                }
            } catch (error) {
                console.error('Lỗi tạo người dùng:', error);
                showAlert('danger', 'Có lỗi xảy ra khi tạo người dùng');
            } finally {
                button.html(originalText).prop('disabled', false);
            }
        });
    }

    // Setup edit user form
    function setupEditUserForm() {
        $('#editUserBtn').click(async function() {
            const form = $('#editUserForm')[0];
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            const button = $(this);
            const originalText = button.html();
            button.html('<span class="spinner-border spinner-border-sm me-2"></span>Đang cập nhật...').prop('disabled', true);

            try {
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());
                const userId = data.id;
                delete data.id;

                const response = await fetch(`/api/admin/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (response.ok) {
                    showAlert('success', result.message);
                    $('#editUserModal').modal('hide');
                    await loadUsers(currentPage);
                } else {
                    showAlert('danger', result.message);
                }
            } catch (error) {
                console.error('Lỗi cập nhật người dùng:', error);
                showAlert('danger', 'Có lỗi xảy ra khi cập nhật người dùng');
            } finally {
                button.html(originalText).prop('disabled', false);
            }
        });
    }

    // Setup reset password form
    function setupResetPasswordForm() {
        $('#resetPasswordBtn').click(async function() {
            const form = $('#resetPasswordForm')[0];
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            const button = $(this);
            const originalText = button.html();
            button.html('<span class="spinner-border spinner-border-sm me-2"></span>Đang đặt lại...').prop('disabled', true);

            try {
                const userId = $('#resetUserId').val();
                const newPassword = $('#newPassword').val();

                const response = await fetch(`/api/admin/users/${userId}/reset-password`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    },
                    body: JSON.stringify({ newPassword })
                });

                const result = await response.json();

                if (response.ok) {
                    showAlert('success', result.message);
                    $('#resetPasswordModal').modal('hide');
                    form.reset();
                    form.classList.remove('was-validated');
                } else {
                    showAlert('danger', result.message);
                }
            } catch (error) {
                console.error('Lỗi đặt lại mật khẩu:', error);
                showAlert('danger', 'Có lỗi xảy ra khi đặt lại mật khẩu');
            } finally {
                button.html(originalText).prop('disabled', false);
            }
        });
    }

    // Setup password toggles
    function setupPasswordToggles() {
        $('#toggleCreatePassword, #toggleNewPassword').click(function() {
            const input = $(this).prev('input');
            const type = input.attr('type') === 'password' ? 'text' : 'password';
            input.attr('type', type);
            $(this).find('i').toggleClass('fa-eye fa-eye-slash');
        });
    }

    // Global functions for table actions
    window.editUser = async function(userId) {
        try {
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'GET',
                headers: {
                    'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });

            if (response.ok) {
                const result = await response.json();
                const user = result.data;

                // Populate edit form
                $('#editUserId').val(user.id);
                $('#editUsername').val(user.username);
                $('#editEmail').val(user.email);
                $('#editPhone').val(user.phone || '');
                $('#editAddress').val(user.address || '');
                $('#editActive').val(user.is_active.toString());
                $('#editRole').val(user.role_id || '');
                $('#editUserType').val(user.user_type || '');

                $('#editUserModal').modal('show');
            } else {
                showAlert('danger', 'Không thể tải thông tin người dùng');
            }
        } catch (error) {
            console.error('Lỗi tải thông tin người dùng:', error);
            showAlert('danger', 'Có lỗi xảy ra khi tải thông tin người dùng');
        }
    };

    window.resetPassword = function(userId, username) {
        $('#resetUserId').val(userId);
        $('#resetUsername').text(username);
        $('#resetPasswordModal').modal('show');
    };

    window.unlockUser = async function(userId) {
        if (!confirm('Bạn có chắc chắn muốn mở khóa tài khoản này?')) return;

        try {
            const response = await fetch(`/api/admin/users/${userId}/unlock`, {
                method: 'POST',
                headers: {
                    'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });

            const result = await response.json();

            if (response.ok) {
                showAlert('success', result.message);
                await loadUsers(currentPage);
            } else {
                showAlert('danger', result.message);
            }
        } catch (error) {
            console.error('Lỗi mở khóa người dùng:', error);
            showAlert('danger', 'Có lỗi xảy ra khi mở khóa tài khoản');
        }
    };

    window.deleteUser = async function(userId, username) {
        if (!confirm(`Bạn có chắc chắn muốn xóa người dùng "${username}"? Hành động này không thể hoàn tác.`)) return;

        try {
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'DELETE',
                headers: {
                    'CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                }
            });

            const result = await response.json();

            if (response.ok) {
                showAlert('success', result.message);
                await loadUsers(currentPage);
            } else {
                showAlert('danger', result.message);
            }
        } catch (error) {
            console.error('Lỗi xóa người dùng:', error);
            showAlert('danger', 'Có lỗi xảy ra khi xóa người dùng');
        }
    };

    // Utility functions
    function showLoading() {
        $('#loadingState').removeClass('d-none');
        $('#usersTableBody').empty();
        $('#paginationContainer').addClass('d-none');
    }

    function hideLoading() {
        $('#loadingState').addClass('d-none');
    }

    function showNoData() {
        $('#noDataState').removeClass('d-none');
        $('#paginationContainer').addClass('d-none');
    }

    function hideNoData() {
        $('#noDataState').addClass('d-none');
    }

    function showAlert(type, message) {
        const alertContainer = $('#alertContainer');
        const alert = $(`
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `);
        
        alertContainer.append(alert);
        
        // Auto dismiss after 5 seconds
        setTimeout(() => {
            alert.removeClass('show');
            setTimeout(() => alert.remove(), 150);
        }, 5000);
    }
});
</script>
